version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache \
              py-pip=9.0.0-r1 \
              libintl gettext
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            login="$(aws ecr get-login)"
            ${login}
            docker build --cache-from=app -t app .
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              login="$(aws ecr get-login)"
              ${login}
              docker tag app "${ECR_ENDPOINT}/${CIRCLE_PROJECT_REPONAME}:v0.1.${CIRCLE_BUILD_NUM}"
              docker push "${ECR_ENDPOINT}/${CIRCLE_PROJECT_REPONAME}:v0.1.${CIRCLE_BUILD_NUM}"
            fi
      - run:
          name: Template k8s config
          command: for i in ./k8s-*.yaml; do envsubst < "$i" > resolved-$(basename "$i"); done        
      - persist_to_workspace:
          root: ./
          paths:
            - resolved-k8s-*.yaml
  deploy-to-staging:
    docker:
      - image: ${ECR_ENDPOINT}/beewave-do-kube-deploy:latest
        aws_auth:
            aws_access_key_id: ${AWS_ACCESS_KEY_ID}
            aws_secret_access_key: ${AWS_SECRET_ACCESS_KEY}
    steps:
      - attach_workspace:
          at: /tmp/workspace       
      - run:
          name: Deploy the deployment into Kubernetes
          command: kubectl apply -f /tmp/workspace/resolved-k8s-deployment.yaml
      - run:
          name: Deploy the service into Kubernetes
          command: kubectl apply -f /tmp/workspace/resolved-k8s-service.yaml
workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - deploy-to-staging:
          requires:
            - build